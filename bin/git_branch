#!/usr/bin/env ruby

module Color
  RED="\033[0;31m"
  YELLOW="\033[0;33m"
  GREEN="\033[0;32m"
  NO_COLOR="\033[0m"

  class << self
    def red (s)
      "#{RED}#{s}#{NO_COLOR}"
    end

    def green (s)
      "#{GREEN}#{s}#{NO_COLOR}"
    end

    def yellow (s)
      "#{YELLOW}#{s}#{NO_COLOR}"
    end
  end
end

module Braces
  class << self
    def angle(s)
      "<#{s}>"
    end

    def curly(s)
      "{#{s}}"
    end

    def parens(s)
      "(#{branch})"
    end
  end
end

def branch
  current_branch = `git branch`.lines.select { |line| /^\*/ =~ line }.first || ""
  current_branch.sub(/^\* /, "").chomp
end

module Status
  class << self
    def unstaged?
      status = `git status --porcelain`
      /^ ([MARCD])/ =~ status
    end

    def staged?
      status = `git status --porcelain`
      /^([MARCD]) / =~ status
    end

    def clean?
      status = `git status --porcelain`
      /.*/ =~ status
    end
  end
end

def apply_status(branch)
  return Color.red Braces.angle branch if Status.unstaged?
  return Color.yellow Braces.curly branch if Status.staged?
  Color.green Braces.parens branch
end

puts apply_status branch